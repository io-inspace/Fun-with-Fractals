%this code returns a square landscape where size is determined by
%2^maxlevel + 1

%pick a FRACTAL DIMENSION D 2:3.  Palmer 1992 does 2, 2.25, 2.5, 2.75, 3.

D = 2;
H = 3 - D; %H ranges between 0 and 1 and = 3-D from Palmer 1992, referred to as the scaling factor.

%start with an EMPTY MATRIX:

dim = 17; %choose array size
rows = dim;
cols = dim;
landscape = zeros(rows,cols);

%determine MAXLEVEL:

maxlevel = log(dim-1)/log(2); %given by Saupe's 2^maxlevel + 1 = size

%seed the four corners with random numbers: (is this the initial SD?)

landscape(1,1) = randn;
landscape(rows,1) = randn;
landscape(1,cols) = randn;
landscape(rows,cols) = randn;

sigma = std(nonzeros(landscape)); %initial SD from the first four random points??  
%Do you keep renewing after each iteration?

%get an array of DELTAS

delta = zeros(1,maxlevel);
for i = 1:maxlevel;
    delta(1,i) = (sigma/((2^i)^(2*H)))*(1-2^(2*(H-2)));
end %this is the variance of displacement Dn from Saupe.  D for displacement n = 1:maxlevel.
    %you get the midpoint by taking the average of the surrounding points
    %and adding Dn drawn from a distribution with delta variation and mean
    %0.  I don't know where sigma (the initial SD) comes from, and I don't
    %know how to take the average with my maps because the numbers on
    %either side of the point either come from the level before or two
    %levels ago.  All four?  Or just point(1) and point(2)?

%seed the center via the diagonal code:

k = dim-1; %k is the number of diagonals in the matrix

%doing the MAIN DIAGONAL first gives us a matrix to add all the other 
%diagonals to:

main = diag(landscape,0);
points = find(main);
for y = 1:length(points)-1;
main((points(y)+points(y+1))/2) = randn;
end
matrix = diag(main,0);

%UPPER TRIANGLE

for x = 1:k;
    if any(diag(landscape,x)) == 1; %check to see if there are nonzero elements in the diagonal.
       diagonal = diag(landscape,x);
       points = find(diagonal);
    for y = 1:length(points)-1;
    diagonal((points(y)+points(y+1))/2) = randn;
    end 
    matrix = matrix + diag(diagonal,x);
    else
        diagonal = diag(landscape,x);
        matrix = matrix + diag(diagonal,x);
    end
end


%do the lower triangle
for x = 1:k;
    if any(diag(landscape,-x)) == 1; %check to see if there are nonzero elements in the diagonal.
       diagonal = diag(landscape,-x);
       points = find(diagonal);
    for y = 1:length(points)-1;
    diagonal((points(y)+points(y+1))/2) = randn;
    end 
    matrix = matrix + diag(diagonal,-x);
    else
        diagonal = diag(landscape,-x);
        matrix = matrix + diag(diagonal,-x);
    end
end

landscape = matrix;

%this is the same start to every landscape.  The following is the big loop
%where there are two big steps: horizontal/verticle midpoints, then diagonal
%(center) midpoints. 

%the number of repeats is 2*maxlevel-1

for z = 1:maxlevel-1;
%PART ONE: MIDPOINTS
    for x = 1:dim;
    points = find(landscape(x,:));
        for y = 1:length(points)-1;
        landscape(x,((points(y)+points(y+1))/2)) = randn;
        end
    end

landscape = transpose(landscape);

points = find(landscape(1,:));
for y = 1:length(points)-1;
    landscape(1,((points(y)+points(y+1))/2)) = randn;
end

landscape = flipud(landscape);

points = find(landscape(1,:));
for y = 1:length(points)-1;
    landscape(1,((points(y)+points(y+1))/2)) = randn;
end

%PART TWO: DIAGONALS (CENTERS)

k = dim-1; %k is the number of diagonals in the matrix

%doing the MAIN DIAGONAL first gives us a matrix to add all the other 
%diagonals to:

main = diag(landscape,0);
points = find(main);
for y = 1:length(points)-1;
    main((points(y)+points(y+1))/2) = randn;
end
matrix = diag(main,0);

%UPPER TRIANGLE

for x = 1:k;
    if any(diag(landscape,x)) == 1; %check to see if there are nonzero elements in the diagonal.
       diagonal = diag(landscape,x);
       points = find(diagonal);
    for y = 1:length(points)-1;
        diagonal((points(y)+points(y+1))/2) = randn;
    end 
    matrix = matrix + diag(diagonal,x);
    else
        diagonal = diag(landscape,x);
        matrix = matrix + diag(diagonal,x);
    end
end

%LOWER TRIANGLE
for x = 1:k;
    if any(diag(landscape,-x)) == 1;
       diagonal = diag(landscape,-x);
       points = find(diagonal);
    for y = 1:length(points)-1;
        diagonal((points(y)+points(y+1))/2) = randn;
    end 
    matrix = matrix + diag(diagonal,-x);
    else
        diagonal = diag(landscape,-x);
        matrix = matrix + diag(diagonal,-x);
    end
end

landscape = matrix;
count = z;
end % this for loop gives you everything up until the final midpoint loop.

%FINISH:

for x = 1:dim;
    points = find(landscape(x,:));
        for y = 1:length(points)-1;
        landscape(x,((points(y)+points(y+1))/2)) = randn;
        end
end

landscape = transpose(landscape);

points = find(landscape(1,:));
for y = 1:length(points)-1;
    landscape(1,((points(y)+points(y+1))/2)) = randn;
end

landscape = flipud(landscape);

points = find(landscape(1,:));
for y = 1:length(points)-1;
    landscape(1,((points(y)+points(y+1))/2)) = randn;
end

%now the next step is to build in the proper algorithm from Saupe.

